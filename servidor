#!/usr/bin/env python3
import asyncio
import re
import socket

class Servidor:
    def __init__(self, porta):
        s = self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind(('', porta))
        s.listen(5)
        self.conexoes = []
        self.nicknames = {}
        self.canais = {}

    def registrar_monitor_de_conexoes_aceitas(self, callback):
        asyncio.get_event_loop().add_reader(self.s, lambda: callback(Conexao(self.s.accept(), self)))

    def adicionar_conexao(self, conexao):
        self.conexoes.append(conexao)

    def remover_conexao(self, conexao):
        self.conexoes.remove(conexao)


class Conexao:
    def __init__(self, accept_tuple, servidor):
        self.s, _ = accept_tuple
        self.dados_residuais = b''
        self.nickid = b'*'
        self.servidor = servidor
        self.canais = []

    def registrar_recebedor(self, callback):
        asyncio.get_event_loop().add_reader(self.s, lambda: callback(self, self.s.recv(8192)))

    def enviar(self, dados):
        self.s.sendall(dados)

    def fechar(self):
        asyncio.get_event_loop().remove_reader(self.s)
        self.s.close()


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()
    

def split_messages(data):
    return list(filter((b'').__ne__, data.split(b'\r\n')))


def process_ping(conexao, message):
    request, text = message.split(b' ', 1)
    conexao.enviar(b':server PONG server :' + text + b'\r\n')


def process_nick(conexao, message, servidor):
    request, nickname = message.split(b' ', 1)
    nickname = nickname.strip()

    if validar_nome(nickname):
        nick_in_use = False
        for conn in servidor.conexoes:
            if conn.nickid.lower() == nickname.lower() and conn != conexao:
                nick_in_use = True
                conexao.enviar(b':server 433 ' + conexao.nickid + b' ' + nickname + b' :Nickname is already in use\r\n')
                break

        if not nick_in_use:
            if conexao.nickid == b'*':
                conexao.enviar(b':server 001 ' + nickname + b' :Welcome\r\n' + b':server 422 ' + nickname + b' :MOTD File is missing\r\n')
                conexao.nickid = nickname
                servidor.nicknames[nickname.lower()] = conexao
            else:
                old_nickname = conexao.nickid
                conexao.nickid = nickname
                conexao.enviar(b':' + old_nickname + b' NICK ' + nickname + b'\r\n')

                for conn in servidor.conexoes:
                    if conn != conexao and old_nickname in conn.nickid and old_nickname in conn.servidor.nicknames:
                        conn.enviar(b':' + old_nickname + b' NICK ' + nickname + b'\r\n')

    else:
        conexao.enviar(b':server 432 ' + conexao.nickid + b' ' + nickname + b' :Erroneous nickname\r\n')


def process_privmsg(conexao, message):
    request, destinatario, conteudo = message.split(b' ', 2)
    destinatario = destinatario.strip()
    conteudo = conteudo.strip()

    if destinatario.startswith(b'#') and destinatario.upper() in conexao.servidor.canais:
        for chave in conexao.servidor.canais[destinatario.upper()]:
            if conexao.servidor.canais[destinatario.upper()][chave] != conexao:
                conexao.servidor.canais[destinatario.upper()][chave].enviar(
                    b':' + conexao.nickid + b' PRIVMSG ' + destinatario + b' ' + conteudo + b'\r\n'
                )
    else:
        dest_conexao = None
        for conn in conexao.servidor.conexoes:
            if conn.nickid.upper() == destinatario.upper():
                dest_conexao = conn
                break
        if dest_conexao:
            dest_conexao.enviar(b':' + conexao.nickid + b' PRIVMSG ' + dest_conexao.nickid + b' ' + conteudo + b'\r\n')


def process_join(conexao, message):
    request, canal = message.split(b' ', 1)
    canal = canal.strip()

    if canal.startswith(b'#') and validar_nome(canal[1:]):
        if canal.upper() not in conexao.servidor.canais:
            conexao.servidor.canais[canal.upper()] = {}
        conexao.servidor.canais[canal.upper()][conexao.nickid] = conexao

        if canal.upper() not in conexao.canais:
            conexao.canais.append(canal.upper())
        membros = b''

        for chave in conexao.servidor.canais[canal.upper()]:
            conexao.servidor.canais[canal.upper()][chave].enviar(b':' + conexao.nickid + b' JOIN :' + canal + b'\r\n')
            membros += conexao.servidor.canais[canal.upper()][chave].nickid + b' '

        for chave in sorted(servidor.canais[canal.upper()].keys()): 
            membros += chave + b' '
        send = b':server 353 ' + conexao.nickid + b' = ' + canal + b' :' + membros
        while len(send) > 510:
            restante = send[:510]
            conexao.enviar(send + b'\r\n')
            send = restante
                        
        conexao.enviar(send + b'\r\n' + b':server 366 ' + conexao.nickid + b' ' + canal + b' :End of /NAMES list.\r\n')
         
    else:
        conexao.enviar(b':server 403 ' + canal + b' :No such channel.\r\n')

def process_part(conexao, message):
    request, canal = message.split(b' ', 1)
    canal = canal.strip()

    if canal.startswith(b'#') and canal.upper() in conexao.servidor.canais:
        if conexao.nickid in conexao.servidor.canais[canal.upper()]:
            for chave in conexao.servidor.canais[canal.upper()]:
                conexao.servidor.canais[canal.upper()][chave].enviar(
                    b':' + conexao.nickid + b' PART ' + canal + b'\r\n'
                )
            del conexao.servidor.canais[canal.upper()][conexao.nickid]
            conexao.canais.remove(canal.upper())
    else:
        conexao.enviar(b':server 403 ' + canal + b' :No such channel.\r\n')

def dados_recebidos(conexao, dados):
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''


    if dados == b'':
        temp_list = []  
        for canal in conexao.canais:
            servidor.canais[canal].pop(conexao.nickid, None)
            for chave in servidor.canais[canal]:
                 temp_list.append(servidor.canais[canal][chave])
        temp_list = list(dict.fromkeys(temp_list)) 
        for item in temp_list: 
                item.enviar(b':' + conexao.nickid + b' QUIT :Connection closed\r\n')
        servidor.conexoes.remove(conexao)
        return sair(conexao)

    messages = split_messages(dados)
    if not dados.endswith(b'\r\n'):
        conexao.dados_residuais += messages.pop(-1)

    for message in messages:
        request, text = message.split(b' ', 1)
        if request.upper() == b'PING':
            process_ping(conexao, message)
        elif request.upper() == b'NICK':
            process_nick(conexao, message, conexao.servidor)
        elif request.upper() == b'PRIVMSG':
            process_privmsg(conexao, message)
        elif request.upper() == b'JOIN':
            if text.startswith(b'#') and validar_nome(text[1:]):
                if text.upper() not in servidor.canais.keys():
                    servidor.canais[text.upper()] = {}
                servidor.canais[text.upper()][conexao.nickid] = conexao 
                    
                if text.upper() not in conexao.canais:
                    conexao.canais.append(text.upper())
                membros = b''    
                    
                for chave in servidor.canais[text.upper()]:
                    servidor.canais[text.upper()][chave].enviar(b':' + conexao.nickid + b' JOIN :' + text + b'\r\n')
                    
                for chave in sorted(servidor.canais[text.upper()].keys()): 
                    membros += chave + b' '
                send = b':server 353 ' + conexao.nickid + b' = ' + text + b' :' + membros
                while len(send) > 510:
                    restante = send[:510]
                    conexao.enviar(send + b'\r\n')
                    send = restante
                        
                conexao.enviar(send + b'\r\n' + b':server 366 ' + conexao.nickid + b' ' + text + b' :End of /NAMES list.\r\n')
            else:
                conexao.enviar(b':server 403 ' + canal + b' :No such channel.\r\n')

        elif request.upper() == b'PART':
            text = text.split(b' ')[0]
            if text.upper() in servidor.canais.keys():
                if conexao.nickid in servidor.canais[text.upper()].keys():
                     for chave in servidor.canais[text.upper()]:
                         servidor.canais[text.upper()][chave].enviar(b':' + conexao.nickid + b' PART ' + text + b'\r\n')
                     del servidor.canais[text.upper()][conexao.nickid]
                     conexao.canais.remove(text.upper())
                                   
        print(conexao, dados)

def conexao_aceita(conexao):
    print(conexao.nickid, 'nova conexão')
    conexao.servidor.adicionar_conexao(conexao)
    conexao.registrar_recebedor(dados_recebidos)

    
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
